-- Supplementary materials for the course of logic and relational programming, 2021
-- (C) Dmitry Boulytchev, dboulytchev@gmail.com
-- Conjunctive normal forms.

module CNF where

import Formula
import Data.List
import Control.Monad.State.Lazy

-- A type for CNF: a list (conjunction) of lists (clauses) of
-- literas (positive or negative variable names)
type CNF = [[Var]]

-- Tseitin's conversion
toCNF f =
  let (v, (fs, _)) = runState (enumerate f) ([], maxVar f) in
  cnfize $ map Formula.toCNF (v:fs) 
  where
    cnfize f = cnfize' [] f where
      cnfize' acc []              = acc
      cnfize' acc (f :/\: g : tl) = cnfize' acc (f : g : tl)
      cnfize' acc (f :\/: g : tl) = cnfize' ((clause f ++ clause g) : acc) tl
      cnfize' acc (f : tl)        = cnfize' (clause f : acc) tl
      clause (Var n)         = [n]
      clause (Neg (Var (n))) = [-n]
      clause (f :\/: g)      = clause f ++ clause g
    enumerate :: F -> State ([F], Int) F
    enumerate (Neg f) = do
      v <- enumerate f
      (acc, n) <- get
      put (Var (n+1) :<=>: Neg v : acc, n+1)
      return $ Var (n+1)      
    enumerate (m :\/:  p) = enumerate2 (:\/:)  m p
    enumerate (m :/\:  p) = enumerate2 (:/\:)  m p
    enumerate (m :=>:  p) = enumerate2 (:=>:)  m p
    enumerate (m :<=>: p) = enumerate2 (:<=>:) m p
    enumerate f           = return f
    enumerate2 :: (F -> F -> F) -> F -> F -> State ([F], Int) F
    enumerate2 f p q = do
      vp <- enumerate p
      vq <- enumerate q
      (acc, n) <- get
      put (Var (n+1) :<=>: f vp vq : acc, n+1)
      return $ Var (n+1)

-- The inverse conversion
fromCNF (h : tl) = foldl (\ acc c -> acc :/\: fromClause c) (fromClause h) tl where
  fromClause (h : tl)  = foldl (\ acc v -> acc :\/: fromVar v) (fromVar h) tl
  fromVar n | n < 0     = Neg $ Var (-n)
            | otherwise = Var n

-- The equisatisfability of Tseitin's conversion
equisaT :: F -> Bool
equisaT f = Formula.equisat f (fromCNF $ CNF.toCNF f)

-- Tseitin's conversion gives a CNF
isCNF :: F -> Bool
isCNF = Formula.isCNF . fromCNF . CNF.toCNF 
